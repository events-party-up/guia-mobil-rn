// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

package com.mapbox.rctmgl.components.styles;

import com.mapbox.mapboxsdk.style.layers.BackgroundLayer;
import com.mapbox.mapboxsdk.style.layers.CircleLayer;
import com.mapbox.mapboxsdk.style.layers.FillExtrusionLayer;
import com.mapbox.mapboxsdk.style.layers.FillLayer;
import com.mapbox.mapboxsdk.style.layers.LineLayer;
import com.mapbox.mapboxsdk.style.layers.PropertyFactory;
import com.mapbox.mapboxsdk.style.layers.PropertyValue;
import com.mapbox.mapboxsdk.style.layers.RasterLayer;
import com.mapbox.mapboxsdk.style.layers.SymbolLayer;
import com.mapbox.mapboxsdk.style.layers.TransitionOptions;
import com.mapbox.mapboxsdk.style.light.Light;
import com.mapbox.mapboxsdk.style.light.Position;
import com.mapbox.rctmgl.utils.DownloadMapImageTask;

import java.util.List;

public class RCTMGLStyleFactory {
    public static final String VALUE_KEY = "value";
    public static final String SHOULD_ADD_IMAGE_KEY = "shouldAddImage";

    public static void setFillLayerStyle(final FillLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "fillAntialias":
              RCTMGLStyleFactory.setFillAntialias(layer, styleValue);
              break;
            case "fillOpacity":
              RCTMGLStyleFactory.setFillOpacity(layer, styleValue);
              break;
            case "fillOpacityTransition":
              RCTMGLStyleFactory.setFillOpacityTransition(layer, styleValue);
              break;
            case "fillColor":
              RCTMGLStyleFactory.setFillColor(layer, styleValue);
              break;
            case "fillColorTransition":
              RCTMGLStyleFactory.setFillColorTransition(layer, styleValue);
              break;
            case "fillOutlineColor":
              RCTMGLStyleFactory.setFillOutlineColor(layer, styleValue);
              break;
            case "fillOutlineColorTransition":
              RCTMGLStyleFactory.setFillOutlineColorTransition(layer, styleValue);
              break;
            case "fillTranslate":
              RCTMGLStyleFactory.setFillTranslate(layer, styleValue);
              break;
            case "fillTranslateTransition":
              RCTMGLStyleFactory.setFillTranslateTransition(layer, styleValue);
              break;
            case "fillTranslateAnchor":
              RCTMGLStyleFactory.setFillTranslateAnchor(layer, styleValue);
              break;
            case "fillPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setFillPattern(layer, styleValue);
                  }
              });
              break;
            case "fillPatternTransition":
              RCTMGLStyleFactory.setFillPatternTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setLineLayerStyle(final LineLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "lineCap":
              RCTMGLStyleFactory.setLineCap(layer, styleValue);
              break;
            case "lineJoin":
              RCTMGLStyleFactory.setLineJoin(layer, styleValue);
              break;
            case "lineMiterLimit":
              RCTMGLStyleFactory.setLineMiterLimit(layer, styleValue);
              break;
            case "lineRoundLimit":
              RCTMGLStyleFactory.setLineRoundLimit(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "lineOpacity":
              RCTMGLStyleFactory.setLineOpacity(layer, styleValue);
              break;
            case "lineOpacityTransition":
              RCTMGLStyleFactory.setLineOpacityTransition(layer, styleValue);
              break;
            case "lineColor":
              RCTMGLStyleFactory.setLineColor(layer, styleValue);
              break;
            case "lineColorTransition":
              RCTMGLStyleFactory.setLineColorTransition(layer, styleValue);
              break;
            case "lineTranslate":
              RCTMGLStyleFactory.setLineTranslate(layer, styleValue);
              break;
            case "lineTranslateTransition":
              RCTMGLStyleFactory.setLineTranslateTransition(layer, styleValue);
              break;
            case "lineTranslateAnchor":
              RCTMGLStyleFactory.setLineTranslateAnchor(layer, styleValue);
              break;
            case "lineWidth":
              RCTMGLStyleFactory.setLineWidth(layer, styleValue);
              break;
            case "lineWidthTransition":
              RCTMGLStyleFactory.setLineWidthTransition(layer, styleValue);
              break;
            case "lineGapWidth":
              RCTMGLStyleFactory.setLineGapWidth(layer, styleValue);
              break;
            case "lineGapWidthTransition":
              RCTMGLStyleFactory.setLineGapWidthTransition(layer, styleValue);
              break;
            case "lineOffset":
              RCTMGLStyleFactory.setLineOffset(layer, styleValue);
              break;
            case "lineOffsetTransition":
              RCTMGLStyleFactory.setLineOffsetTransition(layer, styleValue);
              break;
            case "lineBlur":
              RCTMGLStyleFactory.setLineBlur(layer, styleValue);
              break;
            case "lineBlurTransition":
              RCTMGLStyleFactory.setLineBlurTransition(layer, styleValue);
              break;
            case "lineDasharray":
              RCTMGLStyleFactory.setLineDasharray(layer, styleValue);
              break;
            case "lineDasharrayTransition":
              RCTMGLStyleFactory.setLineDasharrayTransition(layer, styleValue);
              break;
            case "linePattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setLinePattern(layer, styleValue);
                  }
              });
              break;
            case "linePatternTransition":
              RCTMGLStyleFactory.setLinePatternTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setSymbolLayerStyle(final SymbolLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "symbolPlacement":
              RCTMGLStyleFactory.setSymbolPlacement(layer, styleValue);
              break;
            case "symbolSpacing":
              RCTMGLStyleFactory.setSymbolSpacing(layer, styleValue);
              break;
            case "symbolAvoidEdges":
              RCTMGLStyleFactory.setSymbolAvoidEdges(layer, styleValue);
              break;
            case "iconAllowOverlap":
              RCTMGLStyleFactory.setIconAllowOverlap(layer, styleValue);
              break;
            case "iconIgnorePlacement":
              RCTMGLStyleFactory.setIconIgnorePlacement(layer, styleValue);
              break;
            case "iconOptional":
              RCTMGLStyleFactory.setIconOptional(layer, styleValue);
              break;
            case "iconRotationAlignment":
              RCTMGLStyleFactory.setIconRotationAlignment(layer, styleValue);
              break;
            case "iconSize":
              RCTMGLStyleFactory.setIconSize(layer, styleValue);
              break;
            case "iconTextFit":
              RCTMGLStyleFactory.setIconTextFit(layer, styleValue);
              break;
            case "iconTextFitPadding":
              RCTMGLStyleFactory.setIconTextFitPadding(layer, styleValue);
              break;
            case "iconImage":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setIconImage(layer, styleValue);
                  }
              });
              break;
            case "iconRotate":
              RCTMGLStyleFactory.setIconRotate(layer, styleValue);
              break;
            case "iconPadding":
              RCTMGLStyleFactory.setIconPadding(layer, styleValue);
              break;
            case "iconKeepUpright":
              RCTMGLStyleFactory.setIconKeepUpright(layer, styleValue);
              break;
            case "iconOffset":
              RCTMGLStyleFactory.setIconOffset(layer, styleValue);
              break;
            case "iconAnchor":
              RCTMGLStyleFactory.setIconAnchor(layer, styleValue);
              break;
            case "iconPitchAlignment":
              RCTMGLStyleFactory.setIconPitchAlignment(layer, styleValue);
              break;
            case "textPitchAlignment":
              RCTMGLStyleFactory.setTextPitchAlignment(layer, styleValue);
              break;
            case "textRotationAlignment":
              RCTMGLStyleFactory.setTextRotationAlignment(layer, styleValue);
              break;
            case "textField":
              RCTMGLStyleFactory.setTextField(layer, styleValue);
              break;
            case "textFont":
              RCTMGLStyleFactory.setTextFont(layer, styleValue);
              break;
            case "textSize":
              RCTMGLStyleFactory.setTextSize(layer, styleValue);
              break;
            case "textMaxWidth":
              RCTMGLStyleFactory.setTextMaxWidth(layer, styleValue);
              break;
            case "textLineHeight":
              RCTMGLStyleFactory.setTextLineHeight(layer, styleValue);
              break;
            case "textLetterSpacing":
              RCTMGLStyleFactory.setTextLetterSpacing(layer, styleValue);
              break;
            case "textJustify":
              RCTMGLStyleFactory.setTextJustify(layer, styleValue);
              break;
            case "textAnchor":
              RCTMGLStyleFactory.setTextAnchor(layer, styleValue);
              break;
            case "textMaxAngle":
              RCTMGLStyleFactory.setTextMaxAngle(layer, styleValue);
              break;
            case "textRotate":
              RCTMGLStyleFactory.setTextRotate(layer, styleValue);
              break;
            case "textPadding":
              RCTMGLStyleFactory.setTextPadding(layer, styleValue);
              break;
            case "textKeepUpright":
              RCTMGLStyleFactory.setTextKeepUpright(layer, styleValue);
              break;
            case "textTransform":
              RCTMGLStyleFactory.setTextTransform(layer, styleValue);
              break;
            case "textOffset":
              RCTMGLStyleFactory.setTextOffset(layer, styleValue);
              break;
            case "textAllowOverlap":
              RCTMGLStyleFactory.setTextAllowOverlap(layer, styleValue);
              break;
            case "textIgnorePlacement":
              RCTMGLStyleFactory.setTextIgnorePlacement(layer, styleValue);
              break;
            case "textOptional":
              RCTMGLStyleFactory.setTextOptional(layer, styleValue);
              break;
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "iconOpacity":
              RCTMGLStyleFactory.setIconOpacity(layer, styleValue);
              break;
            case "iconOpacityTransition":
              RCTMGLStyleFactory.setIconOpacityTransition(layer, styleValue);
              break;
            case "iconColor":
              RCTMGLStyleFactory.setIconColor(layer, styleValue);
              break;
            case "iconColorTransition":
              RCTMGLStyleFactory.setIconColorTransition(layer, styleValue);
              break;
            case "iconHaloColor":
              RCTMGLStyleFactory.setIconHaloColor(layer, styleValue);
              break;
            case "iconHaloColorTransition":
              RCTMGLStyleFactory.setIconHaloColorTransition(layer, styleValue);
              break;
            case "iconHaloWidth":
              RCTMGLStyleFactory.setIconHaloWidth(layer, styleValue);
              break;
            case "iconHaloWidthTransition":
              RCTMGLStyleFactory.setIconHaloWidthTransition(layer, styleValue);
              break;
            case "iconHaloBlur":
              RCTMGLStyleFactory.setIconHaloBlur(layer, styleValue);
              break;
            case "iconHaloBlurTransition":
              RCTMGLStyleFactory.setIconHaloBlurTransition(layer, styleValue);
              break;
            case "iconTranslate":
              RCTMGLStyleFactory.setIconTranslate(layer, styleValue);
              break;
            case "iconTranslateTransition":
              RCTMGLStyleFactory.setIconTranslateTransition(layer, styleValue);
              break;
            case "iconTranslateAnchor":
              RCTMGLStyleFactory.setIconTranslateAnchor(layer, styleValue);
              break;
            case "textOpacity":
              RCTMGLStyleFactory.setTextOpacity(layer, styleValue);
              break;
            case "textOpacityTransition":
              RCTMGLStyleFactory.setTextOpacityTransition(layer, styleValue);
              break;
            case "textColor":
              RCTMGLStyleFactory.setTextColor(layer, styleValue);
              break;
            case "textColorTransition":
              RCTMGLStyleFactory.setTextColorTransition(layer, styleValue);
              break;
            case "textHaloColor":
              RCTMGLStyleFactory.setTextHaloColor(layer, styleValue);
              break;
            case "textHaloColorTransition":
              RCTMGLStyleFactory.setTextHaloColorTransition(layer, styleValue);
              break;
            case "textHaloWidth":
              RCTMGLStyleFactory.setTextHaloWidth(layer, styleValue);
              break;
            case "textHaloWidthTransition":
              RCTMGLStyleFactory.setTextHaloWidthTransition(layer, styleValue);
              break;
            case "textHaloBlur":
              RCTMGLStyleFactory.setTextHaloBlur(layer, styleValue);
              break;
            case "textHaloBlurTransition":
              RCTMGLStyleFactory.setTextHaloBlurTransition(layer, styleValue);
              break;
            case "textTranslate":
              RCTMGLStyleFactory.setTextTranslate(layer, styleValue);
              break;
            case "textTranslateTransition":
              RCTMGLStyleFactory.setTextTranslateTransition(layer, styleValue);
              break;
            case "textTranslateAnchor":
              RCTMGLStyleFactory.setTextTranslateAnchor(layer, styleValue);
              break;
        }
      }
    }
    public static void setCircleLayerStyle(final CircleLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "circleRadius":
              RCTMGLStyleFactory.setCircleRadius(layer, styleValue);
              break;
            case "circleRadiusTransition":
              RCTMGLStyleFactory.setCircleRadiusTransition(layer, styleValue);
              break;
            case "circleColor":
              RCTMGLStyleFactory.setCircleColor(layer, styleValue);
              break;
            case "circleColorTransition":
              RCTMGLStyleFactory.setCircleColorTransition(layer, styleValue);
              break;
            case "circleBlur":
              RCTMGLStyleFactory.setCircleBlur(layer, styleValue);
              break;
            case "circleBlurTransition":
              RCTMGLStyleFactory.setCircleBlurTransition(layer, styleValue);
              break;
            case "circleOpacity":
              RCTMGLStyleFactory.setCircleOpacity(layer, styleValue);
              break;
            case "circleOpacityTransition":
              RCTMGLStyleFactory.setCircleOpacityTransition(layer, styleValue);
              break;
            case "circleTranslate":
              RCTMGLStyleFactory.setCircleTranslate(layer, styleValue);
              break;
            case "circleTranslateTransition":
              RCTMGLStyleFactory.setCircleTranslateTransition(layer, styleValue);
              break;
            case "circleTranslateAnchor":
              RCTMGLStyleFactory.setCircleTranslateAnchor(layer, styleValue);
              break;
            case "circlePitchScale":
              RCTMGLStyleFactory.setCirclePitchScale(layer, styleValue);
              break;
            case "circlePitchAlignment":
              RCTMGLStyleFactory.setCirclePitchAlignment(layer, styleValue);
              break;
            case "circleStrokeWidth":
              RCTMGLStyleFactory.setCircleStrokeWidth(layer, styleValue);
              break;
            case "circleStrokeWidthTransition":
              RCTMGLStyleFactory.setCircleStrokeWidthTransition(layer, styleValue);
              break;
            case "circleStrokeColor":
              RCTMGLStyleFactory.setCircleStrokeColor(layer, styleValue);
              break;
            case "circleStrokeColorTransition":
              RCTMGLStyleFactory.setCircleStrokeColorTransition(layer, styleValue);
              break;
            case "circleStrokeOpacity":
              RCTMGLStyleFactory.setCircleStrokeOpacity(layer, styleValue);
              break;
            case "circleStrokeOpacityTransition":
              RCTMGLStyleFactory.setCircleStrokeOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setFillExtrusionLayerStyle(final FillExtrusionLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "fillExtrusionOpacity":
              RCTMGLStyleFactory.setFillExtrusionOpacity(layer, styleValue);
              break;
            case "fillExtrusionOpacityTransition":
              RCTMGLStyleFactory.setFillExtrusionOpacityTransition(layer, styleValue);
              break;
            case "fillExtrusionColor":
              RCTMGLStyleFactory.setFillExtrusionColor(layer, styleValue);
              break;
            case "fillExtrusionColorTransition":
              RCTMGLStyleFactory.setFillExtrusionColorTransition(layer, styleValue);
              break;
            case "fillExtrusionTranslate":
              RCTMGLStyleFactory.setFillExtrusionTranslate(layer, styleValue);
              break;
            case "fillExtrusionTranslateTransition":
              RCTMGLStyleFactory.setFillExtrusionTranslateTransition(layer, styleValue);
              break;
            case "fillExtrusionTranslateAnchor":
              RCTMGLStyleFactory.setFillExtrusionTranslateAnchor(layer, styleValue);
              break;
            case "fillExtrusionPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setFillExtrusionPattern(layer, styleValue);
                  }
              });
              break;
            case "fillExtrusionPatternTransition":
              RCTMGLStyleFactory.setFillExtrusionPatternTransition(layer, styleValue);
              break;
            case "fillExtrusionHeight":
              RCTMGLStyleFactory.setFillExtrusionHeight(layer, styleValue);
              break;
            case "fillExtrusionHeightTransition":
              RCTMGLStyleFactory.setFillExtrusionHeightTransition(layer, styleValue);
              break;
            case "fillExtrusionBase":
              RCTMGLStyleFactory.setFillExtrusionBase(layer, styleValue);
              break;
            case "fillExtrusionBaseTransition":
              RCTMGLStyleFactory.setFillExtrusionBaseTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setRasterLayerStyle(final RasterLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "rasterOpacity":
              RCTMGLStyleFactory.setRasterOpacity(layer, styleValue);
              break;
            case "rasterOpacityTransition":
              RCTMGLStyleFactory.setRasterOpacityTransition(layer, styleValue);
              break;
            case "rasterHueRotate":
              RCTMGLStyleFactory.setRasterHueRotate(layer, styleValue);
              break;
            case "rasterHueRotateTransition":
              RCTMGLStyleFactory.setRasterHueRotateTransition(layer, styleValue);
              break;
            case "rasterBrightnessMin":
              RCTMGLStyleFactory.setRasterBrightnessMin(layer, styleValue);
              break;
            case "rasterBrightnessMinTransition":
              RCTMGLStyleFactory.setRasterBrightnessMinTransition(layer, styleValue);
              break;
            case "rasterBrightnessMax":
              RCTMGLStyleFactory.setRasterBrightnessMax(layer, styleValue);
              break;
            case "rasterBrightnessMaxTransition":
              RCTMGLStyleFactory.setRasterBrightnessMaxTransition(layer, styleValue);
              break;
            case "rasterSaturation":
              RCTMGLStyleFactory.setRasterSaturation(layer, styleValue);
              break;
            case "rasterSaturationTransition":
              RCTMGLStyleFactory.setRasterSaturationTransition(layer, styleValue);
              break;
            case "rasterContrast":
              RCTMGLStyleFactory.setRasterContrast(layer, styleValue);
              break;
            case "rasterContrastTransition":
              RCTMGLStyleFactory.setRasterContrastTransition(layer, styleValue);
              break;
            case "rasterFadeDuration":
              RCTMGLStyleFactory.setRasterFadeDuration(layer, styleValue);
              break;
            case "rasterFadeDurationTransition":
              RCTMGLStyleFactory.setRasterFadeDurationTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setBackgroundLayerStyle(final BackgroundLayer layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "visibility":
              RCTMGLStyleFactory.setVisibility(layer, styleValue);
              break;
            case "backgroundColor":
              RCTMGLStyleFactory.setBackgroundColor(layer, styleValue);
              break;
            case "backgroundColorTransition":
              RCTMGLStyleFactory.setBackgroundColorTransition(layer, styleValue);
              break;
            case "backgroundPattern":
              style.addImage(styleValue, new DownloadMapImageTask.OnAllImagesLoaded() {
                  @Override
                  public void onAllImagesLoaded() {
                      RCTMGLStyleFactory.setBackgroundPattern(layer, styleValue);
                  }
              });
              break;
            case "backgroundPatternTransition":
              RCTMGLStyleFactory.setBackgroundPatternTransition(layer, styleValue);
              break;
            case "backgroundOpacity":
              RCTMGLStyleFactory.setBackgroundOpacity(layer, styleValue);
              break;
            case "backgroundOpacityTransition":
              RCTMGLStyleFactory.setBackgroundOpacityTransition(layer, styleValue);
              break;
        }
      }
    }
    public static void setLightLayerStyle(final Light layer, RCTMGLStyle style) {
      List<String> styleKeys = style.getAllStyleKeys();

      if (styleKeys.size() == 0) {
        return;
      }

      for (String styleKey : styleKeys) {
        final RCTMGLStyleValue styleValue = style.getStyleValueForKey(styleKey);

        switch (styleKey) {
            case "anchor":
              RCTMGLStyleFactory.setAnchor(layer, styleValue);
              break;
            case "position":
              RCTMGLStyleFactory.setPosition(layer, styleValue);
              break;
            case "positionTransition":
              RCTMGLStyleFactory.setPositionTransition(layer, styleValue);
              break;
            case "color":
              RCTMGLStyleFactory.setColor(layer, styleValue);
              break;
            case "colorTransition":
              RCTMGLStyleFactory.setColorTransition(layer, styleValue);
              break;
            case "intensity":
              RCTMGLStyleFactory.setIntensity(layer, styleValue);
              break;
            case "intensityTransition":
              RCTMGLStyleFactory.setIntensityTransition(layer, styleValue);
              break;
        }
      }
    }

    public static void setVisibility(FillLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setFillAntialias(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.fillAntialias(value);
            }
        };

        layer.setProperties(PropertyFactory.fillAntialias(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillAntialias(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setFillOpacity(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.fillOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.fillOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setFillOpacityTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillOpacityTransition(transition);
      }
    }

    public static void setFillColor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.fillColor(value);
            }
        };

        layer.setProperties(PropertyFactory.fillColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setFillColorTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillColorTransition(transition);
      }
    }

    public static void setFillOutlineColor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.fillOutlineColor(value);
            }
        };

        layer.setProperties(PropertyFactory.fillOutlineColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillOutlineColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setFillOutlineColorTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillOutlineColorTransition(transition);
      }
    }

    public static void setFillTranslate(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.fillTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.fillTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setFillTranslateTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillTranslateTransition(transition);
      }
    }

    public static void setFillTranslateAnchor(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.fillTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.fillTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setFillPattern(FillLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.fillPattern(value);
            }
        };

        layer.setProperties(PropertyFactory.fillPattern(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillPattern(styleValue.getString(VALUE_KEY)));
      }
    }


    public static void setFillPatternTransition(FillLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillPatternTransition(transition);
      }
    }

    public static void setLineCap(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.lineCap(value);
            }
        };

        layer.setProperties(PropertyFactory.lineCap(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineCap(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setLineJoin(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.lineJoin(value);
            }
        };

        layer.setProperties(PropertyFactory.lineJoin(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineJoin(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setLineMiterLimit(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineMiterLimit(value);
            }
        };

        layer.setProperties(PropertyFactory.lineMiterLimit(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineMiterLimit(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setLineRoundLimit(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineRoundLimit(value);
            }
        };

        layer.setProperties(PropertyFactory.lineRoundLimit(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineRoundLimit(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setVisibility(LineLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setLineOpacity(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.lineOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.lineOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setLineOpacityTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineOpacityTransition(transition);
      }
    }

    public static void setLineColor(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.lineColor(value);
            }
        };

        layer.setProperties(PropertyFactory.lineColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.lineColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setLineColorTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineColorTransition(transition);
      }
    }

    public static void setLineTranslate(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.lineTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.lineTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setLineTranslateTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineTranslateTransition(transition);
      }
    }

    public static void setLineTranslateAnchor(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.lineTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.lineTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setLineWidth(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.lineWidth(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setLineWidthTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineWidthTransition(transition);
      }
    }

    public static void setLineGapWidth(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineGapWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.lineGapWidth(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.lineGapWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setLineGapWidthTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineGapWidthTransition(transition);
      }
    }

    public static void setLineOffset(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineOffset(value);
            }
        };

        layer.setProperties(PropertyFactory.lineOffset(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.lineOffset(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setLineOffsetTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineOffsetTransition(transition);
      }
    }

    public static void setLineBlur(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.lineBlur(value);
            }
        };

        layer.setProperties(PropertyFactory.lineBlur(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.lineBlur(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setLineBlurTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineBlurTransition(transition);
      }
    }

    public static void setLineDasharray(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.lineDasharray(value);
            }
        };

        layer.setProperties(PropertyFactory.lineDasharray(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.lineDasharray(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setLineDasharrayTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLineDasharrayTransition(transition);
      }
    }

    public static void setLinePattern(LineLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.linePattern(value);
            }
        };

        layer.setProperties(PropertyFactory.linePattern(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.linePattern(styleValue.getString(VALUE_KEY)));
      }
    }


    public static void setLinePatternTransition(LineLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setLinePatternTransition(transition);
      }
    }

    public static void setSymbolPlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.symbolPlacement(value);
            }
        };

        layer.setProperties(PropertyFactory.symbolPlacement(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.symbolPlacement(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setSymbolSpacing(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.symbolSpacing(value);
            }
        };

        layer.setProperties(PropertyFactory.symbolSpacing(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.symbolSpacing(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setSymbolAvoidEdges(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.symbolAvoidEdges(value);
            }
        };

        layer.setProperties(PropertyFactory.symbolAvoidEdges(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.symbolAvoidEdges(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setIconAllowOverlap(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.iconAllowOverlap(value);
            }
        };

        layer.setProperties(PropertyFactory.iconAllowOverlap(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconAllowOverlap(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setIconIgnorePlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.iconIgnorePlacement(value);
            }
        };

        layer.setProperties(PropertyFactory.iconIgnorePlacement(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconIgnorePlacement(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setIconOptional(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.iconOptional(value);
            }
        };

        layer.setProperties(PropertyFactory.iconOptional(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconOptional(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setIconRotationAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconRotationAlignment(value);
            }
        };

        layer.setProperties(PropertyFactory.iconRotationAlignment(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconRotationAlignment(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setIconSize(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconSize(value);
            }
        };

        layer.setProperties(PropertyFactory.iconSize(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconSize(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setIconTextFit(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconTextFit(value);
            }
        };

        layer.setProperties(PropertyFactory.iconTextFit(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconTextFit(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setIconTextFitPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.iconTextFitPadding(value);
            }
        };

        layer.setProperties(PropertyFactory.iconTextFitPadding(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconTextFitPadding(styleValue.getFloatArray(VALUE_KEY)));
      }
    }

    public static void setIconImage(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconImage(value);
            }
        };

        layer.setProperties(PropertyFactory.iconImage(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconImage(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setIconRotate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconRotate(value);
            }
        };

        layer.setProperties(PropertyFactory.iconRotate(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconRotate(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setIconPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconPadding(value);
            }
        };

        layer.setProperties(PropertyFactory.iconPadding(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconPadding(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setIconKeepUpright(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.iconKeepUpright(value);
            }
        };

        layer.setProperties(PropertyFactory.iconKeepUpright(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconKeepUpright(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setIconOffset(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.iconOffset(value);
            }
        };

        layer.setProperties(PropertyFactory.iconOffset(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconOffset(styleValue.getFloatArray(VALUE_KEY)));
      }
    }

    public static void setIconAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.iconAnchor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setIconPitchAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconPitchAlignment(value);
            }
        };

        layer.setProperties(PropertyFactory.iconPitchAlignment(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconPitchAlignment(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextPitchAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textPitchAlignment(value);
            }
        };

        layer.setProperties(PropertyFactory.textPitchAlignment(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textPitchAlignment(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextRotationAlignment(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textRotationAlignment(value);
            }
        };

        layer.setProperties(PropertyFactory.textRotationAlignment(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textRotationAlignment(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextField(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textField(value);
            }
        };

        layer.setProperties(PropertyFactory.textField(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textField(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextFont(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String[], String[]> parser = new RCTMGLStyleFunctionParser<String[], String[]>(styleValue) {
            @Override
            protected String[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getStringArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String[]> getStopValue(String[] value) {
                return PropertyFactory.textFont(value);
            }
        };

        layer.setProperties(PropertyFactory.textFont(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textFont(styleValue.getStringArray(VALUE_KEY)));
      }
    }

    public static void setTextSize(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textSize(value);
            }
        };

        layer.setProperties(PropertyFactory.textSize(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textSize(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextMaxWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textMaxWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.textMaxWidth(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textMaxWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextLineHeight(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textLineHeight(value);
            }
        };

        layer.setProperties(PropertyFactory.textLineHeight(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textLineHeight(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextLetterSpacing(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textLetterSpacing(value);
            }
        };

        layer.setProperties(PropertyFactory.textLetterSpacing(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textLetterSpacing(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextJustify(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textJustify(value);
            }
        };

        layer.setProperties(PropertyFactory.textJustify(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textJustify(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.textAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextMaxAngle(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textMaxAngle(value);
            }
        };

        layer.setProperties(PropertyFactory.textMaxAngle(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textMaxAngle(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextRotate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textRotate(value);
            }
        };

        layer.setProperties(PropertyFactory.textRotate(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textRotate(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextPadding(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textPadding(value);
            }
        };

        layer.setProperties(PropertyFactory.textPadding(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textPadding(styleValue.getFloat(VALUE_KEY)));
      }
    }

    public static void setTextKeepUpright(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.textKeepUpright(value);
            }
        };

        layer.setProperties(PropertyFactory.textKeepUpright(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textKeepUpright(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setTextTransform(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textTransform(value);
            }
        };

        layer.setProperties(PropertyFactory.textTransform(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textTransform(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextOffset(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.textOffset(value);
            }
        };

        layer.setProperties(PropertyFactory.textOffset(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textOffset(styleValue.getFloatArray(VALUE_KEY)));
      }
    }

    public static void setTextAllowOverlap(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.textAllowOverlap(value);
            }
        };

        layer.setProperties(PropertyFactory.textAllowOverlap(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textAllowOverlap(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setTextIgnorePlacement(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.textIgnorePlacement(value);
            }
        };

        layer.setProperties(PropertyFactory.textIgnorePlacement(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textIgnorePlacement(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setTextOptional(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Boolean, Boolean> parser = new RCTMGLStyleFunctionParser<Boolean, Boolean>(styleValue) {
            @Override
            protected Boolean getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getBoolean(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Boolean> getStopValue(Boolean value) {
                return PropertyFactory.textOptional(value);
            }
        };

        layer.setProperties(PropertyFactory.textOptional(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textOptional(styleValue.getBoolean(VALUE_KEY)));
      }
    }

    public static void setVisibility(SymbolLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setIconOpacity(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.iconOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setIconOpacityTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconOpacityTransition(transition);
      }
    }

    public static void setIconColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.iconColor(value);
            }
        };

        layer.setProperties(PropertyFactory.iconColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setIconColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconColorTransition(transition);
      }
    }

    public static void setIconHaloColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.iconHaloColor(value);
            }
        };

        layer.setProperties(PropertyFactory.iconHaloColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconHaloColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setIconHaloColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconHaloColorTransition(transition);
      }
    }

    public static void setIconHaloWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconHaloWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.iconHaloWidth(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconHaloWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setIconHaloWidthTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconHaloWidthTransition(transition);
      }
    }

    public static void setIconHaloBlur(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.iconHaloBlur(value);
            }
        };

        layer.setProperties(PropertyFactory.iconHaloBlur(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.iconHaloBlur(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setIconHaloBlurTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconHaloBlurTransition(transition);
      }
    }

    public static void setIconTranslate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.iconTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.iconTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setIconTranslateTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIconTranslateTransition(transition);
      }
    }

    public static void setIconTranslateAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.iconTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.iconTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.iconTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setTextOpacity(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.textOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setTextOpacityTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextOpacityTransition(transition);
      }
    }

    public static void setTextColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.textColor(value);
            }
        };

        layer.setProperties(PropertyFactory.textColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setTextColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextColorTransition(transition);
      }
    }

    public static void setTextHaloColor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.textHaloColor(value);
            }
        };

        layer.setProperties(PropertyFactory.textHaloColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textHaloColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setTextHaloColorTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextHaloColorTransition(transition);
      }
    }

    public static void setTextHaloWidth(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textHaloWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.textHaloWidth(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textHaloWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setTextHaloWidthTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextHaloWidthTransition(transition);
      }
    }

    public static void setTextHaloBlur(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.textHaloBlur(value);
            }
        };

        layer.setProperties(PropertyFactory.textHaloBlur(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.textHaloBlur(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setTextHaloBlurTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextHaloBlurTransition(transition);
      }
    }

    public static void setTextTranslate(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.textTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.textTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setTextTranslateTransition(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setTextTranslateTransition(transition);
      }
    }

    public static void setTextTranslateAnchor(SymbolLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.textTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.textTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.textTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setVisibility(CircleLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setCircleRadius(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.circleRadius(value);
            }
        };

        layer.setProperties(PropertyFactory.circleRadius(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleRadius(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setCircleRadiusTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleRadiusTransition(transition);
      }
    }

    public static void setCircleColor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.circleColor(value);
            }
        };

        layer.setProperties(PropertyFactory.circleColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setCircleColorTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleColorTransition(transition);
      }
    }

    public static void setCircleBlur(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.circleBlur(value);
            }
        };

        layer.setProperties(PropertyFactory.circleBlur(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleBlur(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setCircleBlurTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleBlurTransition(transition);
      }
    }

    public static void setCircleOpacity(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.circleOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.circleOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setCircleOpacityTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleOpacityTransition(transition);
      }
    }

    public static void setCircleTranslate(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.circleTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.circleTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.circleTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setCircleTranslateTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleTranslateTransition(transition);
      }
    }

    public static void setCircleTranslateAnchor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.circleTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.circleTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.circleTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setCirclePitchScale(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.circlePitchScale(value);
            }
        };

        layer.setProperties(PropertyFactory.circlePitchScale(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.circlePitchScale(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setCirclePitchAlignment(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.circlePitchAlignment(value);
            }
        };

        layer.setProperties(PropertyFactory.circlePitchAlignment(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.circlePitchAlignment(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setCircleStrokeWidth(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.circleStrokeWidth(value);
            }
        };

        layer.setProperties(PropertyFactory.circleStrokeWidth(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleStrokeWidth(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setCircleStrokeWidthTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleStrokeWidthTransition(transition);
      }
    }

    public static void setCircleStrokeColor(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.circleStrokeColor(value);
            }
        };

        layer.setProperties(PropertyFactory.circleStrokeColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleStrokeColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setCircleStrokeColorTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleStrokeColorTransition(transition);
      }
    }

    public static void setCircleStrokeOpacity(CircleLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.circleStrokeOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.circleStrokeOpacity(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.circleStrokeOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setCircleStrokeOpacityTransition(CircleLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setCircleStrokeOpacityTransition(transition);
      }
    }

    public static void setVisibility(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setFillExtrusionOpacity(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.fillExtrusionOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionOpacity(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionOpacityTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionOpacityTransition(transition);
      }
    }

    public static void setFillExtrusionColor(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.fillExtrusionColor(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionColor(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionColorTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionColorTransition(transition);
      }
    }

    public static void setFillExtrusionTranslate(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float[], Float[]> parser = new RCTMGLStyleFunctionParser<Float[], Float[]>(styleValue) {
            @Override
            protected Float[] getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloatArray(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float[]> getStopValue(Float[] value) {
                return PropertyFactory.fillExtrusionTranslate(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionTranslate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionTranslate(styleValue.getFloatArray(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionTranslateTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionTranslateTransition(transition);
      }
    }

    public static void setFillExtrusionTranslateAnchor(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.fillExtrusionTranslateAnchor(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionTranslateAnchor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionTranslateAnchor(styleValue.getString(VALUE_KEY)));
      }
    }

    public static void setFillExtrusionPattern(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.fillExtrusionPattern(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionPattern(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionPattern(styleValue.getString(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionPatternTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionPatternTransition(transition);
      }
    }

    public static void setFillExtrusionHeight(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.fillExtrusionHeight(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionHeight(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionHeight(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionHeightTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionHeightTransition(transition);
      }
    }

    public static void setFillExtrusionBase(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.fillExtrusionBase(value);
            }
        };

        layer.setProperties(PropertyFactory.fillExtrusionBase(styleValue.makeStyleFunction(parser)));
      } else {
        layer.setProperties(PropertyFactory.fillExtrusionBase(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setFillExtrusionBaseTransition(FillExtrusionLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setFillExtrusionBaseTransition(transition);
      }
    }

    public static void setVisibility(RasterLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setRasterOpacity(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterOpacity(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterOpacityTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterOpacityTransition(transition);
      }
    }

    public static void setRasterHueRotate(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterHueRotate(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterHueRotate(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterHueRotate(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterHueRotateTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterHueRotateTransition(transition);
      }
    }

    public static void setRasterBrightnessMin(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterBrightnessMin(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterBrightnessMin(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterBrightnessMin(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterBrightnessMinTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterBrightnessMinTransition(transition);
      }
    }

    public static void setRasterBrightnessMax(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterBrightnessMax(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterBrightnessMax(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterBrightnessMax(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterBrightnessMaxTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterBrightnessMaxTransition(transition);
      }
    }

    public static void setRasterSaturation(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterSaturation(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterSaturation(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterSaturation(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterSaturationTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterSaturationTransition(transition);
      }
    }

    public static void setRasterContrast(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterContrast(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterContrast(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterContrast(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterContrastTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterContrastTransition(transition);
      }
    }

    public static void setRasterFadeDuration(RasterLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.rasterFadeDuration(value);
            }
        };

        layer.setProperties(PropertyFactory.rasterFadeDuration(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.rasterFadeDuration(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setRasterFadeDurationTransition(RasterLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setRasterFadeDurationTransition(transition);
      }
    }

    public static void setVisibility(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
        layer.setProperties(PropertyFactory.visibility(styleValue.getString(VALUE_KEY)));
    }

    public static void setBackgroundColor(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Integer, String> parser = new RCTMGLStyleFunctionParser<Integer, String>(styleValue) {
            @Override
            protected Integer getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getInt(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(Integer value) {
                return PropertyFactory.backgroundColor(value);
            }
        };

        layer.setProperties(PropertyFactory.backgroundColor(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.backgroundColor(styleValue.getInt(VALUE_KEY)));
      }
    }


    public static void setBackgroundColorTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setBackgroundColorTransition(transition);
      }
    }

    public static void setBackgroundPattern(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<String, String> parser = new RCTMGLStyleFunctionParser<String, String>(styleValue) {
            @Override
            protected String getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getString(VALUE_KEY);
            }

            @Override
            protected PropertyValue<String> getStopValue(String value) {
                return PropertyFactory.backgroundPattern(value);
            }
        };

        layer.setProperties(PropertyFactory.backgroundPattern(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.backgroundPattern(styleValue.getString(VALUE_KEY)));
      }
    }


    public static void setBackgroundPatternTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setBackgroundPatternTransition(transition);
      }
    }

    public static void setBackgroundOpacity(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      if (styleValue.isFunction()) {
        RCTMGLStyleFunctionParser<Float, Float> parser = new RCTMGLStyleFunctionParser<Float, Float>(styleValue) {
            @Override
            protected Float getRawStopValue(RCTMGLStyleValue styleValue) {
                return styleValue.getFloat(VALUE_KEY);
            }

            @Override
            protected PropertyValue<Float> getStopValue(Float value) {
                return PropertyFactory.backgroundOpacity(value);
            }
        };

        layer.setProperties(PropertyFactory.backgroundOpacity(styleValue.makeCameraFunction(styleValue.getInt("mode"), parser)));
      } else {
        layer.setProperties(PropertyFactory.backgroundOpacity(styleValue.getFloat(VALUE_KEY)));
      }
    }


    public static void setBackgroundOpacityTransition(BackgroundLayer layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setBackgroundOpacityTransition(transition);
      }
    }

    public static void setAnchor(Light layer, RCTMGLStyleValue styleValue) {
        layer.setAnchor(styleValue.getString(VALUE_KEY));
    }

    public static void setPosition(Light layer, RCTMGLStyleValue styleValue) {
        Float[] values = styleValue.getFloatArray(VALUE_KEY);
        layer.setPosition(Position.fromPosition(values[0], values[1], values[2]));
    }


    public static void setPositionTransition(Light layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setPositionTransition(transition);
      }
    }

    public static void setColor(Light layer, RCTMGLStyleValue styleValue) {
        layer.setColor(styleValue.getInt(VALUE_KEY));
    }


    public static void setColorTransition(Light layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setColorTransition(transition);
      }
    }

    public static void setIntensity(Light layer, RCTMGLStyleValue styleValue) {
        layer.setIntensity(styleValue.getFloat(VALUE_KEY));
    }


    public static void setIntensityTransition(Light layer, RCTMGLStyleValue styleValue) {
      TransitionOptions transition = styleValue.getTransition();
      if (transition != null) {
        layer.setIntensityTransition(transition);
      }
    }

}
